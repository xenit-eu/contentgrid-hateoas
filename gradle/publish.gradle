publishing {
    publications {
        all {
            pom {
                url = 'https://github.com/xenit-eu/contentgrid-hateoas'
                name = project.name
                description = project.description

                scm {
                    connection = 'scm:git:git@github.com:xenit-eu/contentgrid-hateoas.git'
                    developerConnection = 'scm:git:git@github.com:xenit-eu/contentgrid-hateoas.git'
                    url = 'https://github.com/xenit-eu/contentgrid-hateoas.git'
                }

                developers {
                    developer {
                        name = "XeniT"
                        organization = "XeniT Solutions NV"
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS' // both 'RELEASE' and 'SNAPSHOT' enabled
        armored = true
        verify = false // disables need for 'JRELEASER_GPG_PUBLIC_KEY'
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS' // both 'RELEASE' and 'SNAPSHOT' enabled
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    applyMavenCentralRules = true
                    stagingRepository(layout.buildDirectory.dir('staging-deploy'))
                    namespace = 'com.contentgrid'
                }
            }
        }
    }
}

pluginManager.withPlugin('java-library') {
    publishing {
        publications {
            library(MavenPublication) {
                from components.java

                versionMapping {
                    usage("java-api") {
                        fromResolutionResult()
                    }
                    usage("java-runtime") {
                        fromResolutionResult()
                    }
                }
            }
        }
    }
}

pluginManager.withPlugin('java-platform') {
    publishing {
        publications {
            platform(MavenPublication) {
                from components.javaPlatform
            }
        }
    }
}

pluginManager.withPlugin('base') {
    tasks.named('check').configure {
        dependsOn('checkMavenCentralRequirements')
    }
}